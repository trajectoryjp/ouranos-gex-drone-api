syntax = "proto3";

package uas.airmobility.v3 ;

option go_package = "github.com/ouranos-gex/ouranos-gex-api/proto_go/airmobility" ;

import "generic/sdsp_g.proto" ;

enum ObjectType { // 地物の種類
    OBJECT_TYPE_UNSPECIFIED = 0 ;
    TERRAIN = 1 ; // 地形（バリア）
    BUILDING = 2 ; // 建物（バリア）
    RESTRICTED_AREA = 5 ; // 飛行制限空域（飛行空域）
    EMERGENCY_AREA = 6 ; // 緊急用務空域（飛行空域）
    RESERVE_AREA = 7 ; // 飛行計画空域（飛行空域）
    CHANNEL = 8 ;// 航路エリア（飛行空域）
    OVERLAY_AREA = 9 ; // 他システム（SDSPやUSS）で管理される空域

    WEATHER = 20 ; // 気象
    FORECAST_WEATHER = 21 ; // 気象予報
    MICROWAVE = 22 ; // 電波強度
}
message Objects {
    repeated Object objects = 10 ;
}

message Object {
    int64 object_id = 1 ;

    oneof concrete_object { // 大量のボクセルが存在する場合はstreamで分割される
        ObjectTerrain terrain = 2 ; // [oneof object] 地形
        ObjectBuilding building = 3 ; // [oneof object] 建物
        ObjectRestrictedArea restricted_area = 4 ; // [oneof object] 飛行制限空域
        ObjectEmergencyArea emergency_area = 5 ; // [oneof object] 緊急用務空域
        ObjectReserveArea reserve_area = 6 ; // [oneof object] 飛行計画空域
        ObjectChannel channel = 7 ; // [oneof object] 航路エリア
        ObjectOverlayArea overlay_area = 8 ; // [oneof object] 他システム管理エリア

        ObjectWeather weather = 20 ; // [oneof object] 気象
        ObjectForecastWeather forecast_weather = 21 ; // [oneof object] 気象予報
        ObjectMicrowave microwave = 22 ; // [oneof object] 電波強度
    }
}

message ObjectTerrain { // 地形オブジェクトの値。空間IDを含む。
    string reference = 1 ; // 素となる情報へのリンク　

    repeated VoxelValueTerrain voxel_values = 10 ; // 地形オブジェクトを構成するボクセルの値。空間IDを含む。
}

message VoxelValueTerrain  {
    generic.v2.SpatialIdentification id = 1 ; // 空間ID
    bool vacant = 2 ; //値（デフォルトfalse）。falseはidが存在しないことと等価
}

message ObjectBuilding { // 建物オブジェクトの値。空間IDを含む。
    string reference = 1 ; // 素となる情報へのリンク

    repeated VoxelValueBuilding voxel_values = 10 ; // 建物オブジェクトを構成するボクセルの値。空間IDを含む。
}

message VoxelValueBuilding {
    generic.v2.SpatialIdentification id = 1 ; // 空間ID
    bool vacant = 2 ; //値（デフォルトfalse）。falseはidが存在しないことと等価
}

message ObjectRestrictedArea { // 飛行制限空域の値。空間IDを含む。
    enum RestrictType{
        FREE = 0 ; // 制限なし（idが存在しないことと等価）
        P = 1 ; // 飛行禁止
        R = 2 ; // 飛行制限
        K = 3 ; // 訓練等空域
        N = 4; // 一時制限
    }

    string reference = 1 ; // 素となる情報へのリンク　
    RestrictType type = 2 ; // 種別

    repeated VoxelValueRestrictedArea voxel_values = 10 ; // 飛行制限空域オブジェクトを構成するボクセルの値。空間IDを含む。
}

message VoxelValueRestrictedArea {
    generic.v2.SpatialIdentification id = 1 ; // 空間ID
}

message ObjectEmergencyArea { //緊急用務空域オブジェクトの値。空間IDを含む。
    string reference = 1 ; // 素となる情報へのリンク　
    repeated VoxelValueEmergencyArea voxel_values = 2 ; // 緊急用務空域オブジェクトを構成するボクセルの値。空間IDを含む。
}

message VoxelValueEmergencyArea {
    generic.v2.SpatialIdentification id = 1 ; // 空間ID
    bool vacant = 2 ; //値（デフォルトfalse）。falseはidが存在しないことと等価
}

message ObjectReserveArea { //飛行計画空域オブジェクトの値。空間IDを含む。
    message ReservePeriod {
        generic.v2.Period period = 1 ; // 予約時刻帯
        ReservePeriod occupy_period = 2 ; //予約時間帯のうち占有予定時間（飛行時間）
        int64 reserve_id = 3 ; // PutReserveAreaRequestでは0。
    }
    
    string owner_id = 1 ; // 予約者のuserID
    optional ReservePeriod period = 2 ; // PutReserveAreaRequestでは必須。

    repeated VoxelValueReserveArea voxel_values = 10 ; // 飛行計画空域オブジェクトを構成するボクセルの値。空間IDを含む。
}

message VoxelValueReserveArea {
    generic.v2.SpatialIdentification id = 1 ; // 空間ID
    optional ReservePeriod period = 2 ; // 予約時間（プロパティと重複する場合は本パラメータが優先）
}


message ObjectChannel { //航路エリアオブジェクトの値。空間IDを含む。

    generic.v2.ServerAddress owner_address = 1 ; // 航路管理元アドレス　
    string channel_id = 2 ; // 航路識別子

    repeated VoxelValueChannel channel_values = 10 ; // 飛行計画空域オブジェクトを構成するボクセルの値。空間IDを含む。
    repeated VoxelValueJunction junction_values = 11 ; // 他航路との接続点。空間IDを含む。
}

message VoxelValueChannel {
    generic.v2.SpatialIdentification id = 1 ; // 空間ID
}

message VoxelValueJunction {
    generic.v2.SpatialIdentification id = 1 ; // 空間ID
    repeated string connected_channel_ids = 2 ; // 接続先の航路のchannel_id
}

message ObjectOverlayArea { //他システム管理エリアオブジェクトの値。空間IDを含む。
    generic.v2.ServerAddress owner_address = 1 ; // 管理元アドレス

    repeated VoxelValueOverlayArea voxel_values = 10 ; // /他システム管理エリアオブジェクトを構成するボクセルの値。空間IDを含む。
}

message VoxelValueOverlayArea {
    generic.v2.SpatialIdentification id = 1 ; // 空間ID
}

message ObjectWeather { // 気象オブジェクトの値。空間IDを含む。
    string reference = 1 ; // 素となる情報へのリンク　

    repeated VoxelValueWeather voxel_values = 10 ; // /気象オブジェクトを構成するボクセルの値。空間IDを含む。
}

message VoxelValueWeather {
    // 現況
    message CurrentWeather { 
        int64 time = 1 ; // 時刻
        optional float wind_direction = 2 ; // 風向(degree)
        optional float wind_speed = 3 ; // 風速(knot)
        optional float cloud_rate = 4 ; // 雲の割合(%)
        optional float temperature = 5 ; // 気温（°C）
        optional float dew_point = 6 ; // 露点温度（°C）
        optional float pressure = 7 ; // 気圧(hPa)
        optional float precipitation = 8 ; // 降水量（mm/h）
        optional string gggg = 20 ; // 運航上重要な気象
    }

    generic.v2.SpatialIdentification id = 1 ; // 空間ID
    CurrentWeather current_weather = 5 ; // 現況
}

message ObjectForecastWeather { // 気象予報オブジェクトの値。空間IDを含む。    
    string reference = 1 ; // 素となる情報へのリンク　
    repeated VoxelValueForecastWeather voxel_values = 10 ; // /気象オブジェクトを構成するボクセルの値。空間IDを含む。
}

message VoxelValueForecastWeather {
    // 予報
    message Forecast {
        int64 time = 1 ; // 時刻
        optional float wind_direction = 2 ; // 風向(degree)
        optional float wind_speed = 3 ; // 風速(knot)
        optional float cloud_rate = 4 ; // 雲の割合(%)
        optional float precipitation = 8 ; // 降水量（mm/h）
    }

    generic.v2.SpatialIdentification id = 1 ; // 空間ID
    Forecast forecast = 2 ; // 予報
}

message ObjectMicrowave { // 電波強度オブジェクトの値。空間IDを含む。
    string reference = 1 ; // 素となる情報へのリンク
    repeated VoxelValueWMicrowave voxel_values = 2 ; // /電波強度エリアオブジェクトを構成するボクセルの値。空間IDを含む。
}

message VoxelValueWMicrowave {
    message MicrowaveInformation {
        float RSI = 1 ; // 電波強度(dB)
    }

    generic.v2.SpatialIdentification id = 1 ; // 空間ID
    map<string,MicrowaveInformation> information = 2  ;// 電波強度関連情報。キーはキャリア事業者コード
}